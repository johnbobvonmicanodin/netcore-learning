// <auto-generated />
using System;
using ClassLibrary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClassLibrary.Migrations
{
    [DbContext(typeof(KlaydSoulDbContext))]
    [Migration("20190122081314_basket-product")]
    partial class basketproduct
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ClassLibrary.Models.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BasketOwnerId");

                    b.Property<int>("Number");

                    b.Property<Guid?>("Product_chooseId");

                    b.HasKey("Id");

                    b.HasIndex("BasketOwnerId");

                    b.HasIndex("Product_chooseId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("ClassLibrary.Models.Comment", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid?>("Movieid");

                    b.Property<string>("Title");

                    b.HasKey("id");

                    b.HasIndex("Movieid");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ClassLibrary.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("ProductStockId");

                    b.Property<int>("Stock");

                    b.HasKey("Id");

                    b.HasIndex("ProductStockId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("ClassLibrary.Models.Movement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("MovementOriginId");

                    b.Property<int>("Number");

                    b.Property<Guid?>("ProductMovedId");

                    b.Property<string>("Statut");

                    b.Property<string>("Type_of_movement");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("MovementOriginId");

                    b.HasIndex("ProductMovedId");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("ClassLibrary.Models.Movie", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<Guid?>("Directorid");

                    b.Property<float>("Duration");

                    b.Property<string>("Title");

                    b.HasKey("id");

                    b.HasIndex("Directorid");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ClassLibrary.Models.MovieActor", b =>
                {
                    b.Property<Guid>("ActorId");

                    b.Property<Guid>("MovieId");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieActor");
                });

            modelBuilder.Entity("ClassLibrary.Models.Person", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Firstname");

                    b.Property<string>("Name");

                    b.HasKey("id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("ClassLibrary.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Delivery_time");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.Property<double>("PriceHT");

                    b.Property<string>("Stock_place");

                    b.Property<double>("TVA");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ClassLibrary.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("IsSeller");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClassLibrary.Models.Basket", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "BasketOwner")
                        .WithMany()
                        .HasForeignKey("BasketOwnerId");

                    b.HasOne("ClassLibrary.Models.Product", "Product_choose")
                        .WithMany()
                        .HasForeignKey("Product_chooseId");
                });

            modelBuilder.Entity("ClassLibrary.Models.Comment", b =>
                {
                    b.HasOne("ClassLibrary.Models.Movie")
                        .WithMany("Comments")
                        .HasForeignKey("Movieid");
                });

            modelBuilder.Entity("ClassLibrary.Models.Inventory", b =>
                {
                    b.HasOne("ClassLibrary.Models.Product", "ProductStock")
                        .WithMany()
                        .HasForeignKey("ProductStockId");
                });

            modelBuilder.Entity("ClassLibrary.Models.Movement", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "MovementOrigin")
                        .WithMany()
                        .HasForeignKey("MovementOriginId");

                    b.HasOne("ClassLibrary.Models.Product", "ProductMoved")
                        .WithMany()
                        .HasForeignKey("ProductMovedId");
                });

            modelBuilder.Entity("ClassLibrary.Models.Movie", b =>
                {
                    b.HasOne("ClassLibrary.Models.Person", "Director")
                        .WithMany("DirectedMovies")
                        .HasForeignKey("Directorid");
                });

            modelBuilder.Entity("ClassLibrary.Models.MovieActor", b =>
                {
                    b.HasOne("ClassLibrary.Models.Person", "Actor")
                        .WithMany("PlayedMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassLibrary.Models.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
